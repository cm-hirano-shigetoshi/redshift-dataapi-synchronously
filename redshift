#!/usr/bin/env python
import argparse
import sys
import time

import boto3

p = argparse.ArgumentParser()
p.add_argument("-C", "--cluster", default="cluster_name")
p.add_argument("-D", "--database", default="sample_db")
p.add_argument("-U", "--user", default="dbuser")
p.add_argument("-c", "--command")
p.add_argument("-f", "--file")
p.add_argument("-a", "--async_flag", action="store_true")
p.add_argument("--statement_result", default=None)
args = p.parse_args()

# Redshift接続情報
CLUSTER_NAME = args.cluster
DATABASE_NAME = args.database
DB_USER = args.user

data_client = boto3.client("redshift-data")


def execute_query(sqls, async_flag=False):
    # Redshiftにクエリを投げる。非同期なのですぐ返ってくる
    result = data_client.batch_execute_statement(
        ClusterIdentifier=CLUSTER_NAME,
        Database=DATABASE_NAME,
        DbUser=DB_USER,
        Sqls=sqls,
    )

    if async_flag:
        print(result)
        return []
    else:
        print(result, file=sys.stderr)

    # 実行IDを取得
    id = result["Id"]
    # print('id = {}'.format(id))

    # クエリが終わるのを待つ
    statement = ""
    status = ""
    while status != "FINISHED" and status != "FAILED" and status != "ABORTED":
        statement = data_client.describe_statement(Id=id)
        # print(statement)
        status = statement["Status"]
        time.sleep(1)

    # 結果の表示
    if status == "FINISHED":
        if statement["HasResultSet"]:
            ids = [
                f"{id}:{i+1}"
                for i, x in enumerate(statement["SubStatements"])
                if x["HasResultSet"]
            ]
            return ids
        else:
            # 戻り値がないものはFINISHだけ出力して終わり
            print("QUERY FINSHED")
            return []
    elif status == "FAILED":
        # 失敗時
        print("QUERY FAILED\n{}".format(statement))
        return []
    elif status == "ABORTED":
        # ユーザによる停止時
        print("QUERY ABORTED: The query run was stopped by the user.")
        return []


def write_result(ids):
    def print_records(records):
        for record in records:
            record_columns = []
            for column in record:
                assert len(column) == 1
                for k, v in column.items():
                    if k == "isNull":
                        assert v
                        record_columns.append("null")
                    else:
                        record_columns.append(str(v))
            print("\t".join(record_columns))

    for id in ids:
        result = data_client.get_statement_result(Id=id)
        while result.get("NextToken"):
            print_records(result["Records"])
            result = data_client.get_statement_result(
                Id=id, NextToken=result["NextToken"]
            )
        print_records(result["Records"])


if args.statement_result:
    # 結果を取得して表示だけする
    write_result([args.statement_result])
else:
    # SQLを実行する
    if args.command is not None:
        sql = args.command
    elif args.file is not None:
        with open(args.file) as f:
            sql = "\n".join(f.readlines())
    sqls = [q for q in sql.split(";") if len(q.strip()) > 0]
    ids = execute_query(sqls, async_flag=args.async_flag)
    if len(ids) > 0:
        write_result(ids)
